# function cd_func
# This function defines a 'cd' replacement function capable of keeping, 
# displaying and accessing history of visited directories, up to 10 entries.
# To use it, uncomment it, source this file and try 'cd --'.
# acd_func 1.0.5, 10-nov-2004
# Petar Marinov, http:/geocities.com/h2428, this is public domain
# Updated by Steve Warren to add save/load of directory stack.
cd_func ()
{
  local x2 the_new_dir adir index
  local -i cnt

  if [[ $1 ==  "--" ]]; then
    dirs -v
    return 0
  fi

  the_new_dir=$1
  #[[ -z $1 ]] && the_new_dir=$HOME
  [[ -z $1 && ${#DIRSTACK[*]} -gt 1 ]] && the_new_dir="${DIRSTACK[1]}"

  if [[ ${the_new_dir:0:1} == '-' ]]; then
    #
    # Extract dir N from dirs
    index=${the_new_dir:1}
    case "$index" in
    # Show usage
    "h")
      echo "Manage directories"
      echo "  dirname   Switch to the named directory, pushing on the stack"
      echo "  -         Switch to the previous directory (same as no argument)"
      echo "  --        Show the current directory stack"
      echo "  -c        Clear the current directory stack"
      echo "  -d        List the saved directory stacks"
      echo "  -s [name] Save the current directory stack (with optional name)"
      echo "  -l [name] Load the optionally-named directory stack"
      return 0
      ;;
    # Clear the current directory stack
    "c")
      dirs -c
      return 0
      ;;
    # List the saved directory stacks
    "d")
      ls -1 $HOME/.dirStack $HOME/*.dirStack 2> /dev/null
      return 0
      ;;
    # Save the current directory stack (optional name)
    "s")
      local file="$HOME/.dirStack"
      if [[ $# > 1 ]]; then
        file="$HOME/$2.dirStack"
      fi
      pushd . >> /dev/null
      echo "$PWD ${DIRSTACK[*]:1}" > $file
      popd >> /dev/null
      echo "Saved directory stack ($file)"
      return 0
      ;;
    # Load a directory stack (optional name)
    "l")
      local file="$HOME/.dirStack"
      if [[ $# > 1 ]]; then
        file="$HOME/$2.dirStack"
      fi
      read -a DirArray < $file
      dirs -c
      #for dir in ${DirArray[*]}; do pushd -n $dir; done
      #for ((i=${#DirArray[@]}-1; i>=0; i--)); do pushd -n ${DirArray[$i]}; done > /dev/null
      for ((i=${#DirArray[@]}-1; i>0; i--)); do pushd -n ${DirArray[$i]}; done > /dev/null
      cd ${DirArray[0]} > /dev/null
      echo "Loaded directory stack"
      return 0
      ;;
    *)
      [[ -z $index ]] && index=1
      adir=$(dirs +$index)
      [[ -z $adir ]] && return 1
      the_new_dir=$adir
      ;;
    esac
  fi

  #
  # '~' has to be substituted by ${HOME}
  [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"

  #
  # Now change to the new dir and add to the top of the stack
  pushd "${the_new_dir}" > /dev/null
  [[ $? -ne 0 ]] && return 1
  the_new_dir=$(pwd)

  #
  # Trim down everything beyond 11th entry
  popd -n +11 2>/dev/null 1>/dev/null

  #
  # Remove any other occurence of this dir, skipping the top of the stack
  for ((cnt=1; cnt <= 10; cnt++)); do
    x2=$(dirs +${cnt} 2>/dev/null)
    [[ $? -ne 0 ]] && return 0
    [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
    if [[ "${x2}" == "${the_new_dir}" ]]; then
      popd -n +$cnt 2>/dev/null 1>/dev/null
      cnt=cnt-1
    fi
  done

  return 0
}

